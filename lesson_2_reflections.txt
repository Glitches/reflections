What happens when you initialize a repository? Why do you need to do it?

  Initializing a repository means that git will create a hidden folder called ".git"
  where all the metadata will be stored.
  It is needed or i won't be able to store vital information about how changes affect
  files involved in the project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  It's like a place whre you can put those files you want to be part of a commit and it lets
  evaluate the commit you are going to make before everything is uploaded; it's meant to
  let the commit untouched, without deletions and additions etc.

How can you use the staging area to make sure you have one commit per logical
change?

  Let's put those files affected by changes -and only them- in staging area.
  These are the only files on we want to commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Some situations are experimenting new features without touching the main code,
  having a different language localization, deep code refactoring

How do the diagrams help you visualize the branch structure?

  Makes super easy understand where and when the code has been modified

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  it combine the two version together and from 2 branches we melt into one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

  manual merging implies you have to control code yourself: slower but precise;
  on the other hand automatical merge is faaster but cannot resolve conflicts on the same code
  modified by two or more people: it can add or remove some code, but cannot work on the same modified
  lines
