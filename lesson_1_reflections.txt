How did viewing a diff between two versions of a file help you see the bug that
was introduced?

  Well, because this command gives us a direct comparison of which lines of code
  -and only them- are different, puttin each version one next to the other.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

  Because we can keep track of our work: we can compare different version of our code
  over time or keep track of how we implement a feature.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

  Automatically save have the advantage to remember it for you, but it won't
  be on a logical point, but rather on a time point.
  In the end it's manual option is to prefer because saving at a logical point
  gives a clearer idea of the code.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

  Git is made with software in mind, others with written documents, I think, and
  in this case is not common work on more documents togheter.

How can you use the commands git log and git diff to view the history of files?

  Log shows commits, and diff code differences. You can rebuild almost your work
  from zero to the end.

How might using version control make you more confident to make changes that
could break something?

  I can break the code and then undo my changes without effort.

Now that you have your workspace set up, what do you want to try using Git for?

  Contribute to some software in Github!
